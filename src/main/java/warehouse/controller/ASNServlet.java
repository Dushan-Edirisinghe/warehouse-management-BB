package warehouse.controller;

import warehouse.model.ASN;
import warehouse.model.ASNItem;
import warehouse.service.ASNService;
import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.annotation.*;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@WebServlet(name = "ASNServlet", urlPatterns = {"/asn", "/asn/create"})
public class ASNServlet extends HttpServlet {
    private ASNService asnService;

    @Override
    public void init() {
        asnService = new ASNService();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // Forward to the ASN creation form
        request.getRequestDispatcher("/jsp/asnForm.jsp").forward(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        // Get basic ASN information
        String supplierName = request.getParameter("supplierName");
        String deliveryDateStr = request.getParameter("expectedDeliveryDate");

        // Parse ASN items from the form
        String[] productIds = request.getParameterValues("productId");
        String[] quantities = request.getParameterValues("quantity");
        List<ASNItem> items = new ArrayList<>();

        if (productIds != null && quantities != null && productIds.length == quantities.length) {
            for (int i = 0; i < productIds.length; i++) {
                try {
                    int productId = Integer.parseInt(productIds[i]);
                    int quantity = Integer.parseInt(quantities[i]);

                    if (productId > 0 && quantity > 0) {
                        items.add(new ASNItem(
                                0, // itemId will be generated by DB
                                0, // asnId will be set after ASN creation
                                productId,
                                quantity
                        ));
                    }
                } catch (NumberFormatException e) {
                    // Skip invalid items
                }
            }
        }

        try {
            // Parse the delivery date
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Date expectedDeliveryDate = sdf.parse(deliveryDateStr);

            // Validate required fields
            if (supplierName == null || supplierName.trim().isEmpty() || items.isEmpty()) {
                throw new IllegalArgumentException("Missing required fields");
            }

            // Create ASN object
            ASN asn = new ASN();
            asn.setSupplierName(supplierName.trim());
            asn.setExpectedDeliveryDate(expectedDeliveryDate);
            asn.setStatus("Expected");
            asn.setItems(items);

            // Save to database
            boolean success = asnService.createASN(asn);

            if (success) {
                // Redirect to list page on success
                response.sendRedirect(request.getContextPath() + "/asn/list");
            } else {
                // Show error if save failed
                request.setAttribute("error", "Failed to create ASN. Please try again.");
                request.getRequestDispatcher("/jsp/asnForm.jsp").forward(request, response);
            }

        } catch (ParseException e) {
            request.setAttribute("error", "Invalid date format. Please use YYYY-MM-DD.");
            request.getRequestDispatcher("/jsp/asnForm.jsp").forward(request, response);
        } catch (IllegalArgumentException e) {
            request.setAttribute("error", "Please fill all required fields and add at least one item.");
            request.getRequestDispatcher("/jsp/asnForm.jsp").forward(request, response);
        } catch (Exception e) {
            request.setAttribute("error", "An unexpected error occurred: " + e.getMessage());
            request.getRequestDispatcher("/jsp/asnForm.jsp").forward(request, response);
        }
    }
}